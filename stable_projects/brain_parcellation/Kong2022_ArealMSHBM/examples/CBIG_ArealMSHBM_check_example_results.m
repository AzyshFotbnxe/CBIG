function CBIG_ArealMSHBM_check_example_results(out_dir, unittest_flag)

% CBIG_ArealMSHBM_check_example_results(out_dir)
%
% This script is used to compare the example results generated by user with the reference results.
% The script will go through each example and check if the final results exist or not. If the final
% results for an example can not be detected, this example will be skipped. 
%
% Input:
%   - out_dir:
%     The output_directory that saves the example results generated by the user.
%   - unittest_flag: scalar
%     If this script is used to check unit test results, set unittest_flag = 1, else 0. Default is 0.
%
% Example:
%   CBIG_ArealMSHBM_check_example_results('/path_to_your_out_dir');
%
% Written by Ru(by) Kong and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md

if(nargin == 1)
    unittest_flag == 0;
end

ref_dir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', 'brain_parcellation', 'Kong2022_ArealMSHBM',...
 'examples', 'ref_results');
if(unittest_flag == 0)
    %% Example1: generating diffusion embedding matrices of RSFC gradients
    lh_grad = fullfile(out_dir, 'generate_gradients', 'gradients', 'sub1', 'lh_emb_100_distance_matrix.mat');
    rh_grad = fullfile(out_dir, 'generate_gradients', 'gradients', 'sub1', 'rh_emb_100_distance_matrix.mat');
    lh_grad_ref = fullfile(ref_dir, 'generate_gradients', 'gradients', 'sub1', 'lh_emb_100_distance_matrix.mat');
    rh_grad_ref = fullfile(ref_dir, 'generate_gradients', 'gradients', 'sub1', 'rh_emb_100_distance_matrix.mat');

    if(~exist(lh_grad))
        warning(['Cannot detect ' lh_grad '\n']);
        disp('Will skip check Example 1: generating diffusion embedding matrices of RSFC gradients.');
    elseif(~exist(rh_grad))
        warning(['Cannot detect ' rh_grad '\n']);
        disp('Will skip check Example 1: generating diffusion embedding matrices of RSFC gradients.');
    else
        disp('Example 1: generating diffusion embedding matrices of RSFC gradients ...');
        lh_grad_mat = load(lh_grad);
        rh_grad_mat = load(rh_grad);
        lh_grad_mat_ref = load(lh_grad_ref);
        rh_grad_mat_ref = load(rh_grad_ref);
        lh_grad_diff = mean(mean(abs(lh_grad_mat.emb - lh_grad_mat_ref.emb)));
        rh_grad_diff = mean(mean(abs(rh_grad_mat.emb - rh_grad_mat_ref.emb)));
        if((lh_grad_diff <= 1e-6) && (rh_grad_diff <= 1e-6))
            disp('SUCCESS!')
        else
            disp('FAIL!')
            disp('The mean difference between your results and reference results is ...');
            disp(['Left gradient: ' num2str(lh_grad_diff)]);
            disp(['Right gradient: ' num2str(rh_grad_diff)]);
        end
    end

    %% Example2: generating profiles, initialization parameters, and spatial radius masks
    % Profiles:
    lh_avg_profile = fullfile(out_dir, 'generate_profiles_and_ini_params', 'profiles',...
    'avg_profile', 'lh_fsaverage6_roifsaverage3_avg_profile.nii.gz');
    rh_avg_profile = fullfile(out_dir, 'generate_profiles_and_ini_params', 'profiles',...
    'avg_profile', 'rh_fsaverage6_roifsaverage3_avg_profile.nii.gz');
    lh_avg_profile_ref = fullfile(ref_dir, 'generate_profiles_and_ini_params', 'profiles',...
    'avg_profile', 'lh_fsaverage6_roifsaverage3_avg_profile.nii.gz');
    rh_avg_profile_ref = fullfile(ref_dir, 'generate_profiles_and_ini_params', 'profiles',...
    'avg_profile', 'rh_fsaverage6_roifsaverage3_avg_profile.nii.gz');
    if(~exist(lh_avg_profile))
        warning(['Cannot detect ' lh_avg_profile '\n']);
        disp('Will skip check Example 2: generating profiles.');
    elseif(~exist(rh_avg_profile))
        warning(['Cannot detect ' rh_avg_profile '\n']);
        disp('Will skip check Example 2: generating profiles.');
    else
        disp('Example 2: generating profiles ...');
        lh_avg_profile_mat = MRIread(lh_avg_profile);
        rh_avg_profile_mat = MRIread(rh_avg_profile);
        lh_avg_profile_mat_ref = MRIread(lh_avg_profile_ref);
        rh_avg_profile_mat_ref = MRIread(rh_avg_profile_ref);
        lh_avg_profile_diff = mean(mean(mean(abs(lh_avg_profile_mat.vol - lh_avg_profile_mat_ref.vol))));
        rh_avg_profile_diff = mean(mean(mean(abs(rh_avg_profile_mat.vol - rh_avg_profile_mat_ref.vol))));
        if((lh_avg_profile_diff <= 1e-6) && (rh_avg_profile_diff <= 1e-6))
            disp('SUCCESS!')
        else
            disp('FAIL!')
            disp('The mean difference between your results and reference results is ...');
            disp(['Left hemisphere: ' num2str(lh_avg_profile_diff)]);
            disp(['Right hemisphere: ' num2str(rh_avg_profile_diff)]);
        end
    end

    % Initialization parameters
    group_ini = fullfile(out_dir, 'generate_profiles_and_ini_params', 'group', 'group.mat');
    group_ini_ref = fullfile(ref_dir, 'generate_profiles_and_ini_params', 'group', 'group.mat');
    if(~exist(group_ini))
        warning(['Cannot detect ' group_ini '\n']);
        disp('Will skip check Example 2: generating initialization parameters.');
    else    
        disp('Example 2: generating initialization parameters ...');
        group_ini_mat = load(group_ini);
        group_ini_mat_ref = load(group_ini_ref);
        group_ini_diff = mean(mean(abs(group_ini_mat.mtc - group_ini_mat_ref.mtc)));
        if((group_ini_diff <= 1e-6))
            disp('SUCCESS!')
        else
            disp('FAIL!')
            disp('The mean difference between your results and reference results is ...');
            disp(['The mean direction (mtc): ' num2str(group_ini_diff)]);
        end
    end

    % Spatial mask
    mask = fullfile(out_dir, 'generate_profiles_and_ini_params', 'spatial_mask',...
    'spatial_mask_fsaverage5.mat');
    mask_ref = fullfile(ref_dir, 'generate_profiles_and_ini_params', 'spatial_mask',...
    'spatial_mask_fsaverage5.mat');
    if(~exist(mask))
        warning(['Cannot detect ' mask '\n']);
        disp('Will skip check Example 2: generating spatial_mask.');
    else    
        disp('Example 2: generating spatial mask ...');
        mask_mat = load(mask);
        mask_mat_ref = load(mask_ref);
        lh_mask_diff = mean(mean(abs(full(mask_mat.lh_boundary) - full(mask_mat_ref.lh_boundary))));
        rh_mask_diff = mean(mean(abs(full(mask_mat.rh_boundary) - full(mask_mat_ref.rh_boundary))));
        if((max([lh_mask_diff rh_mask_diff]) <= 1e-6))
            disp('SUCCESS!')
        else
            disp('FAIL!')
            disp('The mean difference between your results and reference results is ...');
            disp(['Left hemisphere: ' num2str(lh_mask_diff)]);
            disp(['Right hemisphere: ' num2str(rh_mask_diff)]);
        end
    end

    %% Example3: Group priors estimation
    prior = fullfile(out_dir, 'estimate_group_priors', 'priors', 'gMSHBM', 'beta5', 'Params_Final.mat');
    prior_ref = fullfile(ref_dir, 'estimate_group_priors', 'priors', 'gMSHBM', 'beta5', 'Params_Final.mat');
    if(~exist(prior))
        warning(['Cannot detect ' prior '\n']);
        disp('Will skip check Example3: Group priors estimation.');
    else    
        disp('Example3: Group priors estimation ...');
        prior_mat = load(prior);
        prior_mat_ref = load(prior_ref);
        prior_diff = mean(mean(abs(prior_mat.Params.theta - prior_mat_ref.Params.theta)));
        if((prior_diff <= 1e-6))
            disp('SUCCESS!')
        else
            disp('FAIL!')
            disp('The mean difference between your results and reference results is ...');
            disp(['The spatial probability map (theta): ' num2str(prior_diff)]);
        end
    end

    %% Example4: Individual-level parcellations generation
    % Homogeneity:
    homo = fullfile(out_dir, 'generate_individual_parcellations', 'homogeneity_gMSHBM', 'validation_set',...
    '2_sess', 'beta5', 'Ind_homogeneity_ArealMSHBM_sub1_w50_MRF50_beta5.mat');
    homo_ref = fullfile(ref_dir, 'generate_individual_parcellations', 'homogeneity_gMSHBM', 'validation_set',...
    '2_sess', 'beta5', 'Ind_homogeneity_ArealMSHBM_sub1_w50_MRF50_beta5.mat');
    if(~exist(homo))
        warning(['Cannot detect ' homo '\n']);
        disp('Will skip check Example4: validation during individual-level parcellations generation.');
    else    
        disp('Example4: validation during individual-level parcellations generation ...');
        homo_mat = load(homo);
        homo_mat_ref = load(homo_ref);
        homo_diff = abs(homo_mat.homo_with_weight - homo_mat_ref.homo_with_weight);
        if((homo_diff <= 1e-6))
            disp('SUCCESS!')
        else
            disp('FAIL!')
            disp('The mean difference between your results and reference results is ...');
            disp(['The homogeneity: ' num2str(prior_diff)]);
        end
    end
end
% Individual parcellation:

par = fullfile(out_dir, 'generate_individual_parcellations', 'ind_parcellation_gMSHBM', 'test_set',...
 '4_sess', 'beta5', 'Ind_parcellation_MSHBM_sub2_w50_MRF50_beta5.mat');
par_ref = fullfile(ref_dir, 'generate_individual_parcellations', 'ind_parcellation_gMSHBM', 'test_set',...
 '4_sess', 'beta5', 'Ind_parcellation_MSHBM_sub2_w50_MRF50_beta5.mat');
if(~exist(par))
    warning(['Cannot detect ' par '\n']);
    disp('Will skip check Example4: test during individual-level parcellations generation.');
else    
    disp('Example4: test during individual-level parcellations generation ...');
    par_mat = load(par);
    par_mat_ref = load(par_ref);
    lh_par_diff = sum(abs(par_mat.lh_labels - par_mat_ref.lh_labels));
    rh_par_diff = sum(abs(par_mat.rh_labels - par_mat_ref.rh_labels));
    if((max([lh_par_diff rh_par_diff]) <= 10))
        disp('SUCCESS!')
    else
        disp('FAIL!')
        disp('The difference between your results and reference results is ...');
        disp(['Left hemisphere: ' num2str(lh_par_diff) ' vertices are different']);
        disp(['Right hemisphere: ' num2str(rh_par_diff) ' vertices are different']);
    end
end

disp('Done!')
    




